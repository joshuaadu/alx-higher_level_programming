# 0-add_integer.txt 

===========================
How to Use 0-add_integer.py
===========================

This module simply defines a single function that adds integers: ``add_integer(a, b=98)``.

Numbers
=======

``add_integer(a, b=98)`` returns the sum of its arguments.
For numbers, that value is equivalent to using the ``+`` operator.

::

 >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 3)
    8

::

    >>> add_integer(5, -3)
    2

Working with floating-point values.

::

    >>> add_integer(3.0, 3.0)
    6

Note that floats are casted to ints prior to computation.

::

    >>> add_integer(4.9, 0.2)
    4

::

    >>> add_integer(-4.9, -0.2)
    -4

Combining float and non-float values.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(10)
    108

Non-numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("he", 9)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
